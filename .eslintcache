[{"C:\\ProyectosDev\\cronometro\\src\\index.js":"1","C:\\ProyectosDev\\cronometro\\src\\App.js":"2"},{"size":219,"mtime":1611521870816,"results":"3","hashOfConfig":"4"},{"size":2932,"mtime":1611689192232,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"v79sv5",{"filePath":"9","messages":"10","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"C:\\ProyectosDev\\cronometro\\src\\index.js",[],["12","13"],"C:\\ProyectosDev\\cronometro\\src\\App.js",["14"],"import { useState, useEffect, useRef } from \"react\";\nimport beep from \"./sounds/softBeep.wav\";\nimport click from \"./sounds/click.wav\";\nimport clack from \"./sounds/clack.wav\";\nimport \"./App.css\";\n\nconst beepSound = new Audio(beep);\nconst clickSound = new Audio(click);\nconst clackSound = new Audio(clack);\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nconst Cronometro = (props) => {\n  const [startTime, setStartTime] = useState();\n  const [isBeeping, setIsBeeping] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [currentValue, setCurrentValue] = useState(\"\");\n\n  useEffect(() => setProgress(0), [startTime]);\n\n  const getCurrentValue = () => {\n    if (!startTime) {\n      return \"00:00:00\";\n    }\n\n    const diffMiliseconds = new Date().getTime() - startTime;\n    const diffSeconds = diffMiliseconds / 1000;\n    const diffMinutes = Math.floor(diffSeconds / 60);\n    const diffHours = Math.floor(diffMinutes / 60);\n\n    const fiveSecondValue = (Math.round(diffSeconds) % 60) % 5;\n    setProgress(((diffMiliseconds % 5000) * 100) / 5000 + 10);\n\n    if (fiveSecondValue === 0) {\n      if (!isBeeping) {\n        setIsBeeping(true);\n        if (fiveSecondValue === 0) makeBeepSound();\n        else makeClickClackSound(fiveSecondValue % 2 === 0);\n      }\n    } else {\n      setIsBeeping(false);\n    }\n\n    const strSeconds = format(diffSeconds % 60);\n    const strMinutes = format(diffMinutes % 60);\n    const strHours = format(diffHours % 60);\n\n    return `${strHours}:${strMinutes}:${strSeconds}`;\n  };\n\n  useInterval(() => {\n    setCurrentValue(getCurrentValue());\n  }, 100);\n\n  const start = () => {\n    if (startTime) {\n      setStartTime(0);\n    } else {\n      setStartTime(new Date().getTime());\n    }\n  };\n\n  const format = (num) => num.toFixed(0).padStart(2, \"0\");\n\n  return (\n    <div className=\"cronometro\">\n      <div id=\"buttons\">\n        <a id=\"startButton\" onClick={start}>\n          {startTime ? \"Pause\" : \"Start\"}\n        </a>\n      </div>\n      <div id=\"value\">\n        <h1>{currentValue}</h1>\n      </div>\n      <ProgressBar value={progress} />\n    </div>\n  );\n};\n\nconst makeBeepSound = () => {\n  beepSound.play();\n};\n\nconst makeClickClackSound = (makeClick) => {\n  if (makeClickClackSound) clickSound.play();\n  else clackSound.play();\n};\n\nconst ProgressBar = ({ value }) => {\n  return (\n    <div className=\"fiveSecondsProgressBar\">\n      <div style={{ width: `${value}%` }}></div>\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Cronometro />\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"15","replacedBy":"16"},{"ruleId":"17","replacedBy":"18"},{"ruleId":"19","severity":1,"message":"20","line":86,"column":9,"nodeType":"21","endLine":86,"endColumn":45},"no-native-reassign",["22"],"no-negated-in-lhs",["23"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]