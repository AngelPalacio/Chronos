{"version":3,"sources":["sounds/softBeep.wav","sounds/click.wav","sounds/clack.wav","App.js","index.js"],"names":["beepSound","Audio","beep","clickSound","click","clackSound","clack","Cronometro","props","useState","startTime","setStartTime","isBeeping","setIsBeeping","progress","setProgress","currentValue","setCurrentValue","useEffect","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","diffMiliseconds","Date","getTime","diffSeconds","diffMinutes","Math","floor","diffHours","fiveSecondValue","round","makeBeepSound","makeClickClackSound","strSeconds","format","strMinutes","strHours","getCurrentValue","num","toFixed","padStart","className","onClick","value","play","makeClick","ProgressBar","style","width","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAAe,MAA0B,qCCA1B,MAA0B,kCCA1B,MAA0B,kCCMnCA,G,MAAY,IAAIC,MAAMC,IACtBC,EAAa,IAAIF,MAAMG,GACvBC,EAAa,IAAIJ,MAAMK,GAsB7B,IAAMC,EAAa,SAACC,GAAW,IAAD,EACMC,qBADN,mBACrBC,EADqB,KACVC,EADU,OAEMF,oBAAS,GAFf,mBAErBG,EAFqB,KAEVC,EAFU,OAGIJ,mBAAS,GAHb,mBAGrBK,EAHqB,KAGXC,EAHW,OAIYN,mBAAS,IAJrB,mBAIrBO,EAJqB,KAIPC,EAJO,KAM5BC,qBAAU,kBAAMH,EAAY,KAAI,CAACL,KA1BnC,SAAqBS,EAAUC,GAC7B,IAAMC,EAAgBC,mBAGtBJ,qBAAU,WACRG,EAAcE,QAAUJ,IACvB,CAACA,IAGJD,qBAAU,WAIR,GAAc,OAAVE,EAAgB,CAClB,IAAII,EAAKC,aAJX,WACEJ,EAAcE,YAGaH,GAC3B,OAAO,kBAAMM,cAAcF,OAE5B,CAACJ,IAyCJO,EAAY,WACVV,EA/BsB,WACtB,IAAKP,EACH,MAAO,WAGT,IAAMkB,GAAkB,IAAIC,MAAOC,UAAYpB,EACzCqB,EAAcH,EAAkB,IAChCI,EAAcC,KAAKC,MAAMH,EAAc,IACvCI,EAAYF,KAAKC,MAAMF,EAAc,IAErCI,EAAmBH,KAAKI,MAAMN,GAAe,GAAM,EACzDhB,EAAca,EAAkB,IAAQ,IAAO,IAAO,IAE9B,IAApBQ,EACGxB,IACHC,GAAa,GACW,IAApBuB,EAAuBE,IACtBC,EAAoBH,EAAkB,IAAM,IAGnDvB,GAAa,GAGf,IAAM2B,EAAaC,EAAOV,EAAc,IAClCW,EAAaD,EAAOT,EAAc,IAClCW,EAAWF,EAAON,EAAY,IAEpC,MAAM,GAAN,OAAUQ,EAAV,YAAsBD,EAAtB,YAAoCF,GAIpBI,MACf,KAEH,IAQMH,EAAS,SAACI,GAAD,OAASA,EAAIC,QAAQ,GAAGC,SAAS,EAAG,MAEnD,OACE,sBAAKC,UAAU,aAAf,UACE,qBAAKxB,GAAG,UAAR,SACE,mBAAGA,GAAG,cAAcyB,QAbZ,WAEVtC,EADED,EACW,GAEA,IAAImB,MAAOC,YAStB,SACGpB,EAAY,QAAU,YAG3B,qBAAKc,GAAG,QAAR,SACE,6BAAKR,MAEP,cAAC,EAAD,CAAakC,MAAOpC,QAKpBwB,EAAgB,WACpBtC,EAAUmD,QAGNZ,EAAsB,SAAtBA,EAAuBa,GACvBb,EAAqBpC,EAAWgD,OAC/B9C,EAAW8C,QAGZE,EAAc,SAAC,GAAe,IAAbH,EAAY,EAAZA,MACrB,OACE,qBAAKF,UAAU,yBAAf,SACE,qBAAKM,MAAO,CAAEC,MAAM,GAAD,OAAKL,EAAL,WAaVM,MARf,WACE,OACE,qBAAKR,UAAU,MAAf,SACE,cAAC,EAAD,OChHNS,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.95d42445.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/softBeep.20298913.wav\";","export default __webpack_public_path__ + \"static/media/click.d06d771a.wav\";","export default __webpack_public_path__ + \"static/media/clack.ebeb3de3.wav\";","import { useState, useEffect, useRef } from \"react\";\nimport beep from \"./sounds/softBeep.wav\";\nimport click from \"./sounds/click.wav\";\nimport clack from \"./sounds/clack.wav\";\nimport \"./App.css\";\n\nconst beepSound = new Audio(beep);\nconst clickSound = new Audio(click);\nconst clackSound = new Audio(clack);\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nconst Cronometro = (props) => {\n  const [startTime, setStartTime] = useState();\n  const [isBeeping, setIsBeeping] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [currentValue, setCurrentValue] = useState(\"\");\n\n  useEffect(() => setProgress(0), [startTime]);\n\n  const getCurrentValue = () => {\n    if (!startTime) {\n      return \"00:00:00\";\n    }\n\n    const diffMiliseconds = new Date().getTime() - startTime;\n    const diffSeconds = diffMiliseconds / 1000;\n    const diffMinutes = Math.floor(diffSeconds / 60);\n    const diffHours = Math.floor(diffMinutes / 60);\n\n    const fiveSecondValue = (Math.round(diffSeconds) % 60) % 5;\n    setProgress(((diffMiliseconds % 5000) * 100) / 5000 + 10);\n\n    if (fiveSecondValue === 0) {\n      if (!isBeeping) {\n        setIsBeeping(true);\n        if (fiveSecondValue === 0) makeBeepSound();\n        else makeClickClackSound(fiveSecondValue % 2 === 0);\n      }\n    } else {\n      setIsBeeping(false);\n    }\n\n    const strSeconds = format(diffSeconds % 60);\n    const strMinutes = format(diffMinutes % 60);\n    const strHours = format(diffHours % 60);\n\n    return `${strHours}:${strMinutes}:${strSeconds}`;\n  };\n\n  useInterval(() => {\n    setCurrentValue(getCurrentValue());\n  }, 100);\n\n  const start = () => {\n    if (startTime) {\n      setStartTime(0);\n    } else {\n      setStartTime(new Date().getTime());\n    }\n  };\n\n  const format = (num) => num.toFixed(0).padStart(2, \"0\");\n\n  return (\n    <div className=\"cronometro\">\n      <div id=\"buttons\">\n        <a id=\"startButton\" onClick={start}>\n          {startTime ? \"Pause\" : \"Start\"}\n        </a>\n      </div>\n      <div id=\"value\">\n        <h1>{currentValue}</h1>\n      </div>\n      <ProgressBar value={progress} />\n    </div>\n  );\n};\n\nconst makeBeepSound = () => {\n  beepSound.play();\n};\n\nconst makeClickClackSound = (makeClick) => {\n  if (makeClickClackSound) clickSound.play();\n  else clackSound.play();\n};\n\nconst ProgressBar = ({ value }) => {\n  return (\n    <div className=\"fiveSecondsProgressBar\">\n      <div style={{ width: `${value}%` }}></div>\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Cronometro />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}